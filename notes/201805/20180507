Missing some files from Sanger.
I am beginning to suspect that the free space issue (#3841) is potentially related here.
    Apr 20 15:18:09 pid:5584 NOTICE: msi_update_unixfilesystem_resource_free_space: path to stat [/irods-seq-sr02-ddn-rd10-6-7-8] for resource [irods-seq-sr02-ddn-rd10-6-7-8] doesn't exist, moving to parent
msi_update_unixfilesystem_resource_free_space is not present in the RENCI_Upload files, but it is being called. What other information are we missing?
We need to set up our resources to have limited free space. From the looks of this message, the paths are actually moving around. "moving to parent" makes me wonder about the extra repls.

There is also the concept of "quotas" in use in the Sanger configuration. This is a user constraint that limits the amount of data a user can put into irods at a given time (or for all time?).

There are some things in the decoded core.re from the izone report that may be of interest:
    acGetIcatResults(*Action,*Condition,*GenQOut) {ON((*Action == "replicate") %% (*Action == "trim") %% (*Action == "chksum") %% (*Action == "copy") %% (*Action == "remove")) {msiMakeQuery("DATA_NAME, COLL_NAME",*Condition,*Query); msiExecStrCondQuery(*Query, *GenQOut); cut; } }

---------------

2018/05/09:

https://github.com/irods/irods/blob/921f1bc45d4a03f15bb143e4941ca056e430a922/plugins/microservices/administration/msi_update_unixfilesystem_resource_free_space/libmsi_update_unixfilesystem_resource_free_space.cpp#L78-L79
    Maybe look into a warning for stat'ing RAW /.

Why would this be linked to the triple replica issue?
Try the following:

    root:passthru
    |___repl:replication
        |___rand1:replication
        |   |___ufs1:unixfilesystem
        |   |___ufs2:unixfilesystem
        |___rand2:replication
            |___ufs3:unixfilesystem
            |___ufs4:unixfilesystem

    The unixfilesystem resources need to have limited free space that is updated via PEPs in acPostProcForDataCopyReceived and/or acPostProcForParallelTransferReceived
    The vault path for one of the receiving resources needs to be moved or otherwise made unknown to the system between the put and the post-proc.

    Is there a way to make mungefs make something not exist?
    
Other things to consider:
    required_free_inodes_for_create
    high_watermark
    Are these being updated or checked? What happens if there aren't enough?
    These were deprecated in 4.1.10, so if they are being used, then they will produce warnings in the log (LOG_NOTICE)
    These are only being used on "demo" resources, so not to be taken into consideration.


Look at boost::filesystem::exists(status s)
    exists() returns: status_known(s) && s.type() != file_not_found
    status_known(s) returns: s.type() != status_error

