We need to know that another put to the same logical path is in progress. Simply seeing whether there are other replicas wouldn't be enough. 
The reason is that the force flag becomes moot if we simply do not replicate (will not overwrite the stale copies)

Is the expectation is that a rebalance would need to be performed to update other replicas and we should NEVER replicate with the force flag while this setting is enabled...?
I don't think this is the case because then sanger would have to update everything to run a rebalance every time a force put occurs. Could be more expensive than the put

So we are left with trying to understand when we should replicate when the force flag is enabled. The current approach is to check to see if any replicas exist within the target resource tree on a force put. If so, a flag is set to prevent the replication operation. This will allow the initial put to complete and mark the other replicas stale. This REQUIRES a rebalance to repave the existing replicas. Furthermore, it makes any force put to a replication resource only generate one new copy (and possibly non-deterministic if any tree surgery occurs...?).

    Apparently, if you try to force put an existing data object into irods into a separate resource, it will fail (hierarchy error). This means that only one data object can exist in a given zone and therefore can only exist within 1 resource/hierarchy.
    In other words, in order to put the data object at all, it either must not exist in irods, or it MUST exist in the target resource
    When putting a data object, rsDataObjCreate is called. If the data object already exists, we open it. Otherwise, it is created. In other words, two different code paths. In this case, we are interested in the open path, so we can make our changes in there, I think. This also means that we do not need to worry about leaf bundles and whatnot because the hierarchy is already aware that it owns the data object.


What happens if you put a data object into a resource, then put that into the replication resource, and THEN try the iput -f?
    The replication does not happen


--------------

BOB'S ISSUE

Check commit ba3e71dc9d21e523a579ace8de941de4e10249a7
    > that one is fine - no failure
             ba3e71dc9d21e523a579ace8de941de4e10249a7
    > Nevermind, it's totally the one

