In a data object put, the file is created and then closed. It is on the close (rsDataObjClose) that the replication occurs (because the close calls the "data object modified" operation on all its children)

Can't I just look at the data object in the catalog and then look at the resc hier of each replica and see if any of them have the target resc in the tree?
There is no handy way of getting leaf resources from the catalog in 4.1.x.

get_current_resource_object_count_impl was replaced by gather_leaf_bundle_for_child in commit a8016423b2ff9171acfd3dec04b30fdc3d2e095a
chlGetDistinctDataObjsMissingFromChildGivenParent was replaced by chlGetReplListForLeafBundles
iterates over child map instead of gathering leaf bundles for target resource


How will this behavior interact with the "all" flag? Is that a thing still?

Apparently, if you try to force put an existing data object into irods into a separate resource, it will fail. This means that only one data object can exist in a given zone and therefore can only exist within 1 resource/hierarchy.
In other words, in order to put the data object at all, it either must not exist in irods, or it MUST exist in the target resource.:

How do we know that the existence of a data object in a resource needs to be overwritten? Do we need to change the create operation to an overwrite if it already exists?
Perhaps what we really want to know is whether any replicas exist outside of the one we jsut put?

What happens when the first thing to come up for replication is one of the random nodes? Like the put creates the file in ufs2 and then replicates to ufs1. Will it 
