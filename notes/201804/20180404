How 4-1-x does "leaf bundles":
getDataObjInfo will returns all results given a logical path
This creates a linked list of results of type dataObjInfo_t
We then take the full hierarchy string which represents the target child resource to replicate to (in the case of our example, the random resource)
We see if that child shows up in any of the results for the dataObjInfo query
If so, we bail and do not replicate
If not, we go to the next one
If none of the results for that data object have that resource in the hierarchy strings, then we know that the children of the random do not have a copy
This means that it is okay to replicate there because that child needs a copy and does not already have one

The issue is that the two puts are checking at the same time and there is nothing in the database at the time they are checking the same resource so they both go ahead and replicate there.
This indicates that there is a race condition in the database, which means that Sanger needs to implement/integrate locking mechanisms for their concurrent puts.

The best way to get more information about where the concurrent puts are coming from would be to add more logging about the clients doing the putting
The idea is to add a hidden Sanger server config option which will turn on logging without needing to bounce the server
We should check for this flag in the rsComm_t->option when performing the replicas - need to have baton set this option
Need to insert a key-value pair reference into the rsComm_t struct so that we can shove any information in there that we need
    Client user info
    Client proxy user info
    etc.


-----

